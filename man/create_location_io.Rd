% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_location_io.R
\name{create_location_io}
\alias{create_location_io}
\title{Create a read/write (i/o) function with a given base location}
\usage{
create_location_io(
  startfun,
  data_folder,
  io = c("read", "write"),
  prefix = "project",
  useRstudio = TRUE,
  env = globalenv(),
  ...
)
}
\arguments{
\item{startfun}{\code{function} to create a wrapper around}

\item{data_folder}{\code{character} string giving the filepath of the base
location the new function will read/write from}

\item{io}{\code{character} string taking values of either "read" or "write",
indicating whether \code{startfun} reads or writes information. If \code{io}
is missing then the function will try to deduce the correct value from the
name of \code{startfun}. \code{io} can also be abbreviated to "r" or "w"}

\item{prefix}{\code{character} string giving the prefix for the name of the
new function. Defaults to 'project'}

\item{useRstudio}{\code{bool} (TRUE/FALSE) for whether to use interactive R
Studio prompts or to use the console instead}

\item{env}{\code{environment} to add the new function to. Defaults to
\code{globalenv()}}

\item{...}{other parameters to pass to \code{startfun}}
}
\value{
\code{create_location_io} returns its first argument invisibly
}
\description{
\code{create_location_io} creates a wrapper around a function such as
\code{readRDS} or \code{readr::write_csv}, creating a new function where
reading/writing is done relative to a specified \code{data_folder}, rather
than the working directory. The new function is saved out with the same name
as the input function prefixed by \code{prefix_}.
}
\details{
This function is used for its side effects. It assigns a wrapped function
to an \code{environment}, by default the \code{global environment}.

The functions created by \code{create_location_io} can be used in just the
same way as the functions they wrap, all the same arguments are available.
The only difference is that the filepath that you pass to the wrapped
function is appended to the \code{data_folder} that the function was
created with. For instance, if \code{create_location_io} is used to wrap
\code{fread}, as
\code{create_location_io(data.table::fread, "/tmp/directory")}
then a new function will be created in the \code{global environment}
(your workspace), called \code{project_fread}. If you use this function to
read a file, as \code{data <- project_fread("data/myfile.csv")},
then the file will be read from \code{"/tmp/directory/data/myfile.csv"}.

Even where \code{io} is specified, the function will try to deduce whether
\code{startfun} is an input, or output, function. If this deduction fails then
you will be warned. If the deduction doesn't match \code{io} then the
function will ask the user if they want to continue.
}
\examples{
\dontrun{

# Create a variable holding the path to the data folder.
dat_folder <- "/path/to/chosen/data/folder/"

# Create some wrapped i/o functions. That read/write to
# 'dat_folder' as a base location.
create_location_io(saveRDS, dat_folder, io = "write")
create_location_io(readRDS, dat_folder, prefix = "custom")

# Create some data.
x <- 2

# Save the data to 'dat_folder' using the wrapped function.
project_saveRDS(x, "test.rds")

# Read the saved file back into R.
y <- custom_readRDS("test.rds")

y
}

}
